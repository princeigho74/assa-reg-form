const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst path = require('path');\nconst Database = require('./database');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Initialize database\nconst db = new Database();\n\n// Security middleware\napp.use(helmet());\napp.use(cors());\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: {\n    success: false,\n    message: 'Too many requests from this IP, please try again later.'\n  }\n});\napp.use(limiter);\n\n// Body parsing middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Serve static files\napp.use(express.static(path.join(__dirname, 'public')));\n\n// SIMPLIFIED phone validation - just check length\nfunction isValidPhone(phone) {\n  const cleaned = phone.replace(/\\D/g, '');\n  return cleaned.length >= 10 && cleaned.length <= 15;\n}\n\n// Validation rules with SIMPLIFIED phone validation\nconst registrationValidation = [\n  body('surname')\n    .notEmpty()\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('Surname must be between 2-50 characters'),\n    \n  body('firstName')\n    .notEmpty()\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('First name must be between 2-50 characters'),\n    \n  body('middleName')\n    .optional()\n    .trim()\n    .isLength({ max: 50 })\n    .withMessage('Middle name must be less than 50 characters'),\n    \n  body('phoneNumber')\n    .custom((value) => {\n      if (!isValidPhone(value)) {\n        throw new Error('Please enter a valid phone number');\n      }\n      return true;\n    }),\n    \n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Please enter a valid email address'),\n    \n  body('dateOfBirth')\n    .isISO8601()\n    .toDate()\n    .withMessage('Please enter a valid date of birth'),\n    \n  body('graduationYear')\n    .isInt({ min: 1960, max: new Date().getFullYear() })\n    .withMessage('Please enter a valid graduation year'),\n    \n  body('occupation')\n    .notEmpty()\n    .trim()\n    .isLength({ min: 2, max: 100 })\n    .withMessage('Occupation must be between 2-100 characters'),\n    \n  body('homeAddress')\n    .notEmpty()\n    .trim()\n    .isLength({ min: 10, max: 200 })\n    .withMessage('Home address must be between 10-200 characters')\n];\n\n// Routes\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\n// Admin dashboard\napp.get('/admin', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'admin.html'));\n});\n\n// Register new member\napp.post('/api/register', registrationValidation, async (req, res) => {\n  try {\n    console.log('Registration request received:', req.body);\n    \n    // Check for validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      console.log('Validation errors:', errors.array());\n      return res.status(400).json({ \n        success: false, \n        message: 'Validation failed', \n        errors: errors.array() \n      });\n    }\n\n    const {\n      surname,\n      firstName,\n      middleName,\n      phoneNumber,\n      email,\n      dateOfBirth,\n      graduationYear,\n      occupation,\n      homeAddress\n    } = req.body;\n\n    // Check if email already exists\n    const existingMember = await db.getMemberByEmail(email);\n    if (existingMember) {\n      return res.status(409).json({\n        success: false,\n        message: 'A member with this email address already exists'\n      });\n    }\n\n    // Clean phone number\n    const cleanedPhone = phoneNumber.replace(/\\D/g, '');\n\n    // Generate unique member ID\n    const memberId = await db.generateMemberId();\n\n    // Create new member\n    const newMember = await db.createMember({\n      memberId,\n      surname,\n      firstName,\n      middleName,\n      phoneNumber: cleanedPhone,\n      email,\n      dateOfBirth,\n      graduationYear,\n      occupation,\n      homeAddress\n    });\n\n    console.log('Member created successfully:', newMember);\n\n    res.status(201).json({\n      success: true,\n      message: 'Registration successful!',\n      data: {\n        memberId: newMember.memberId,\n        fullName: `${firstName} ${middleName ? middleName + ' ' : ''}${surname}`\n      }\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error. Please try again later.'\n    });\n  }\n});\n\n// Get all members (for admin purposes)\napp.get('/api/members', async (req, res) => {\n  try {\n    const members = await db.getAllMembers();\n    res.json({\n      success: true,\n      data: members\n    });\n  } catch (error) {\n    console.error('Error fetching members:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error fetching members'\n    });\n  }\n});\n\n// Get member statistics\napp.get('/api/stats', async (req, res) => {\n  try {\n    const stats = await db.getStatistics();\n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error fetching statistics:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error fetching statistics'\n    });\n  }\n});\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  res.json({\n    success: true,\n    message: 'ASSA Registration System is running',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Error handling middleware\napp.use((error, req, res, next) => {\n  console.error(error.stack);\n  res.status(500).json({\n    success: false,\n    message: 'Something went wrong!'\n  });\n});\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({\n    success: false,\n    message: 'Endpoint not found'\n  });\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`🚀 ASSA Registration Server running on port ${PORT}`);\n  console.log(`📝 Access the registration form at: http://localhost:${PORT}`);\n  console.log(`📊 Access the admin dashboard at: http://localhost:${PORT}/admin`);\n  console.log(`🏥 Health check at: http://localhost:${PORT}/api/health`);\n});\n\nmodule.exports = app;
