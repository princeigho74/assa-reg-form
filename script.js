class AssaRegistration {\n    constructor() {\n        this.form = document.getElementById('registration-form');\n        this.submitBtn = document.getElementById('submit-btn');\n        this.successMessage = document.getElementById('success-message');\n        this.errorMessage = document.getElementById('error-message');\n        this.loadingOverlay = document.getElementById('loading-overlay');\n        \n        this.init();\n    }\n\n    init() {\n        this.populateGraduationYears();\n        this.setupEventListeners();\n    }\n\n    populateGraduationYears() {\n        const graduationSelect = document.getElementById('graduationYear');\n        const currentYear = new Date().getFullYear();\n        const startYear = 1960;\n        \n        for (let year = currentYear; year >= startYear; year--) {\n            const option = document.createElement('option');\n            option.value = year;\n            option.textContent = year;\n            graduationSelect.appendChild(option);\n        }\n    }\n\n    setupEventListeners() {\n        // Form submission\n        this.form.addEventListener('submit', (e) => this.handleSubmit(e));\n        \n        // Clear errors on input\n        const inputs = this.form.querySelectorAll('input, select, textarea');\n        inputs.forEach(input => {\n            input.addEventListener('input', () => this.clearFieldError(input));\n        });\n\n        // Simple phone formatting\n        const phoneInput = document.getElementById('phoneNumber');\n        phoneInput.addEventListener('input', (e) => this.formatPhoneNumber(e));\n    }\n\n    // SIMPLIFIED phone validation - just check if it's a number with 10+ digits\n    isValidPhone(phone) {\n        const cleaned = phone.replace(/\\D/g, '');\n        return cleaned.length >= 10 && cleaned.length <= 15;\n    }\n\n    validateForm() {\n        let isValid = true;\n        \n        // Check required fields\n        const requiredFields = ['surname', 'firstName', 'phoneNumber', 'email', 'dateOfBirth', 'graduationYear', 'occupation', 'homeAddress'];\n        \n        requiredFields.forEach(fieldName => {\n            const field = document.getElementById(fieldName);\n            const value = field.value.trim();\n            \n            if (!value) {\n                this.showFieldError(field, `${this.getFieldLabel(fieldName)} is required`);\n                isValid = false;\n            } else {\n                this.clearFieldError(field);\n            }\n        });\n\n        // Phone validation\n        const phoneField = document.getElementById('phoneNumber');\n        if (phoneField.value && !this.isValidPhone(phoneField.value)) {\n            this.showFieldError(phoneField, 'Please enter a valid phone number (at least 10 digits)');\n            isValid = false;\n        }\n\n        // Email validation\n        const emailField = document.getElementById('email');\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (emailField.value && !emailRegex.test(emailField.value)) {\n            this.showFieldError(emailField, 'Please enter a valid email address');\n            isValid = false;\n        }\n\n        return isValid;\n    }\n\n    showFieldError(field, message) {\n        field.classList.add('error');\n        const errorSpan = field.parentNode.querySelector('.error-text');\n        if (errorSpan) {\n            errorSpan.textContent = message;\n            errorSpan.classList.add('show');\n        }\n    }\n\n    clearFieldError(field) {\n        field.classList.remove('error');\n        const errorSpan = field.parentNode.querySelector('.error-text');\n        if (errorSpan) {\n            errorSpan.textContent = '';\n            errorSpan.classList.remove('show');\n        }\n    }\n\n    getFieldLabel(fieldName) {\n        const labels = {\n            surname: 'Surname',\n            firstName: 'First Name',\n            middleName: 'Middle Name',\n            phoneNumber: 'Phone Number',\n            email: 'Email Address',\n            dateOfBirth: 'Date of Birth',\n            graduationYear: 'Graduation Year',\n            occupation: 'Occupation',\n            homeAddress: 'Home Address'\n        };\n        return labels[fieldName] || fieldName;\n    }\n\n    // Simple phone formatting - just clean up non-digits except +\n    formatPhoneNumber(e) {\n        let value = e.target.value;\n        // Allow + at the beginning, then only digits\n        value = value.replace(/[^+\\d]/g, '');\n        e.target.value = value;\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        \n        console.log('Form submitted');\n        \n        // Hide previous messages\n        this.hideMessages();\n        \n        // Validate form\n        if (!this.validateForm()) {\n            this.showError('Please correct the errors above and try again.');\n            return;\n        }\n\n        // Show loading state\n        this.setLoadingState(true);\n\n        try {\n            const formData = new FormData(this.form);\n            const registrationData = {\n                surname: formData.get('surname').trim(),\n                firstName: formData.get('firstName').trim(),\n                middleName: formData.get('middleName').trim() || '',\n                phoneNumber: formData.get('phoneNumber').trim(),\n                email: formData.get('email').trim().toLowerCase(),\n                dateOfBirth: formData.get('dateOfBirth'),\n                graduationYear: parseInt(formData.get('graduationYear')),\n                occupation: formData.get('occupation').trim(),\n                homeAddress: formData.get('homeAddress').trim()\n            };\n\n            console.log('Submitting data:', registrationData);\n\n            const response = await fetch('/api/register', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(registrationData)\n            });\n\n            console.log('Response status:', response.status);\n            \n            const result = await response.json();\n            console.log('Response data:', result);\n\n            if (response.ok && result.success) {\n                this.showSuccess(\n                    `Welcome to ASSA, ${result.data.fullName}! Your member ID is: ${result.data.memberId}`\n                );\n                this.form.reset();\n                this.successMessage.scrollIntoView({ behavior: 'smooth' });\n            } else {\n                // Handle errors\n                let errorMsg = result.message || 'Registration failed';\n                if (result.errors && result.errors.length > 0) {\n                    errorMsg = result.errors.map(err => err.msg || err.message).join(', ');\n                }\n                throw new Error(errorMsg);\n            }\n\n        } catch (error) {\n            console.error('Registration error:', error);\n            this.showError(\n                error.message || 'Something went wrong. Please try again later.'\n            );\n        } finally {\n            this.setLoadingState(false);\n        }\n    }\n\n    setLoadingState(loading) {\n        const submitBtn = this.submitBtn;\n        const spinner = submitBtn.querySelector('.spinner');\n        const text = submitBtn.querySelector('span');\n        \n        if (loading) {\n            submitBtn.disabled = true;\n            if (spinner) spinner.style.display = 'block';\n            if (text) text.textContent = 'Processing...';\n            if (this.loadingOverlay) this.loadingOverlay.style.display = 'flex';\n        } else {\n            submitBtn.disabled = false;\n            if (spinner) spinner.style.display = 'none';\n            if (text) text.textContent = 'Register Now';\n            if (this.loadingOverlay) this.loadingOverlay.style.display = 'none';\n        }\n    }\n\n    showSuccess(message) {\n        document.getElementById('success-details').textContent = message;\n        this.successMessage.style.display = 'flex';\n        this.errorMessage.style.display = 'none';\n    }\n\n    showError(message) {\n        document.getElementById('error-details').textContent = message;\n        this.errorMessage.style.display = 'flex';\n        this.successMessage.style.display = 'none';\n    }\n\n    hideMessages() {\n        this.successMessage.style.display = 'none';\n        this.errorMessage.style.display = 'none';\n    }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('DOM loaded, initializing ASSA Registration');\n    new AssaRegistration();\n});\n\n// Global error handling\nwindow.addEventListener('error', (event) => {\n    console.error('Global error:', event.error);\n});\n\nwindow.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled promise rejection:', event.reason);\n});
